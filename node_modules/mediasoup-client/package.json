{
  "_from": "mediasoup-client",
  "_id": "mediasoup-client@2.0.16",
  "_inBundle": false,
  "_integrity": "sha512-jCL2ocMxsnYPvp5Z+oj9b3rtOJ1GLKfLsWzWaeE2a/Gu2NUz83eTSWIXERW/DJIbaS0kiRW8lK+huyPo7gFqCw==",
  "_location": "/mediasoup-client",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "escapedName": "mediasoup-client",
    "fetchSpec": "latest",
    "name": "mediasoup-client",
    "raw": "mediasoup-client",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mediasoup-client/-/mediasoup-client-2.0.16.tgz",
  "_shasum": "b431fe67c9a6b65700d37ed74f154777867a2da7",
  "_shrinkwrap": null,
  "_spec": "mediasoup-client",
  "_where": "C:\\Users\\Arima\\Documents\\PFC\\5155-67b2cab84dd867cb5178c7e34d92d271",
  "author": {
    "email": "ibc@aliax.net",
    "name": "Iñaki Baz Castillo",
    "url": "https://inakibaz.me"
  },
  "bugs": {
    "url": "https://github.com/versatica/mediasoup-client/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "email": "jmillan@aliax.net",
      "name": "José Luis Millán",
      "url": "https://github.com/jmillan"
    }
  ],
  "dependencies": {
    "bowser": "^1.9.2",
    "debug": "^3.1.0",
    "random-number": "0.0.9",
    "sdp-transform": "^2.4.0"
  },
  "deprecated": false,
  "description": "mediasoup client side JavaScript SDK",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-plugin-transform-builtin-classes": "^0.6.1",
    "babel-preset-env": "^1.6.1",
    "browserify": "^16.1.0",
    "eslint": "^4.18.2",
    "eslint-plugin-import": "^2.9.0",
    "gulp": "^4.0.0",
    "gulp-babel": "^7.0.1",
    "gulp-eslint": "^4.0.2",
    "gulp-header": "^2.0.1",
    "gulp-plumber": "^1.2.0",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^3.0.0",
    "gulp-util": "^3.0.8",
    "vinyl-buffer": "^1.0.1",
    "vinyl-source-stream": "^2.0.0"
  },
  "homepage": "https://mediasoup.org",
  "license": "ISC",
  "main": "lib-es5/index.js",
  "name": "mediasoup-client",
  "optionalDependencies": {},
  "readme": "# mediasoup-client\n\n[![][npm-shield-mediasoup-client]][npm-mediasoup-client]\n\nJavaScript client side SDK for building [mediasoup](https://mediasoup.org) based applications.\n\n\n## Website and documentation\n\n* [mediasoup.org][mediasoup-website]\n\n\n## Usage example\n\n```js\nimport * as mediasoupClient from 'mediasoup-client';\nimport mySignalingChannel from './mySignalingChannel';\n\n// mySignalingChannel is our app custom signaling mechanism to communicate\n// with the server running the mediasoup Node.js app.\n// \n// Here we assume that a mediasoup Room and a Peer (named 'alice') already\n// exist in the server. This channel will be used to communicate with our\n// associated remote Peer (among other custom messages exhange up to the app).\nconst channel = new mySignalingChannel(\n  {\n    url      : 'wss://myserver.test',\n    peerName : 'alice',\n    roomId   : 'demo1'\n  }); \n\n// Create a local Room instance associated to the remote Room.\nconst room = new mediasoupClient.Room();\n\n// Transport for sending our media.\nlet sendTransport;\n\n// Transport for receiving media from remote Peers.\nlet recvTransport;\n\n\n// Join the remote Room.\nroom.join('alice')\n  .then((peers) =>\n  {\n    // Create the Transport for sending our media.\n    sendTransport = room.createTransport('send');\n\n    // Create the Transport for receiving media from remote Peers.\n    recvTransport = room.createTransport('recv');\n\n    // Handle Peers already in to the Room.\n    for (const peer of peers)\n    {\n      handlePeer(peer);\n    }\n  })\n  .then(() =>\n  {\n    // Get our mic and webcam.\n    return navigator.mediaDevices.getUserMedia(\n      {\n        audio : true,\n        video : true\n      });\n  })\n  .then((stream) =>\n  {\n    const audioTrack = stream.getAudioTracks()[0];\n    const videoTrack = stream.getVideoTracks()[0];\n\n    // Create Producers for audio and video.\n    const audioProducer = room.createProducer(audioTrack);\n    const videoProducer = room.createProducer(videoTrack);\n\n    // Send our audio.\n    audioProducer.send(sendTransport)\n      .then(() => console.log('sending our mic'));\n\n    // Send our video.\n    videoProducer.send(sendTransport)\n      .then(() => console.log('sending our webcam'));\n  });\n\n\n// Event fired when a new remote Peer joins the Room.\nroom.on('newpeer', (peer) =>\n{\n  console.log('a new Peer joined the Room: %s', peer.name);\n\n  // Handle the Peer.\n  handlePeer(peer);\n});\n\n\n// Be ready to send mediasoup client requests to our remote mediasoup Peer in\n// the server, and also deal with their associated responses.\nroom.on('request', (request, callback, errback) =>\n{\n  channel.send({ type: 'mediasoup-request', body: request })\n    .then((response) =>\n    {\n      // Success response, so pass the mediasoup response to the local Room.\n      callback(response.body);\n    })\n    .catch((error) =>\n    {\n      // Error response, so pass the error to the local Room.\n      errback(error);\n    });\n});\n\n\n// Be ready to send mediasoup client notifications to our remote mediasoup\n// Peer in the server\nroom.on('notify', (notification) =>\n{\n  channel.send({ type: 'mediasoup-notification', body: notification });\n});\n\n\n// Be ready to receive mediasoup notifications from our remote mediasoup Peer\n// in the server.\nchannel.on('message', (message) =>\n{\n  if (message.type === 'mediasoup-notification')\n  {\n    // Pass the mediasoup notification to the local Room.\n    room.receiveNotification(message.body);\n  }\n  else\n  {\n    // Handle here app custom messages (chat, etc).\n  }\n});\n\n\nfunction handlePeer(peer)\n{\n  // Handle all the Consumers in the Peer.\n  for (const consumer of peer.consumers)\n  {\n    handleConsumer(consumer);\n  }\n\n  // Event fired when the remote Room or Peer is closed.\n  peer.on('close', () =>\n  {\n    console.log('Peer closed');\n  });\n\n  // Event fired when the remote Peer sends a new media to mediasoup server.\n  peer.on('newconsumer', (consumer) =>\n  {\n    console.log('Got a new Consumer');\n\n    // Handle the Consumer.\n    handleConsumer(consumer);\n  });\n}\n\n\nfunction handleConsumer(consumer)\n{\n  // Receive the media over our receiving Transport.\n  consumer.receive(recvTransport)\n    .then((track) =>\n    {\n      console.log('receiving a new remote MediaStreamTrack');\n\n      // Attach the track to a MediaStream and play it.\n    });\n\n  // Event fired when the Consumer is closed.\n  consumer.on('close', () =>\n  {\n    console.log('Consumer closed');\n  });\n}\n```\n\n\n## Authors\n\n* Iñaki Baz Castillo [[website](https://inakibaz.me)|[github](https://github.com/ibc/)]\n* José Luis Millán [[github](https://github.com/jmillan/)]\n\n\n## License\n\n[ISC](./LICENSE)\n\n\n\n\n[mediasoup-website]: https://mediasoup.org\n[npm-shield-mediasoup-client]: https://img.shields.io/npm/v/mediasoup-client.svg\n[npm-mediasoup-client]: https://npmjs.org/package/mediasoup-client\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/versatica/mediasoup-client.git"
  },
  "version": "2.0.16"
}
